#include<iostream>
#include<string>
#include<iomanip>
using namespace std;
template<typename T>
T vvod(T* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		bool fail = true;
		cout << "\nInput:";
		do
		{
			cin >> arr[i];
			if (cin.fail() || cin.rdbuf()->in_avail() > 1)
				cout << "\nError" << endl;
			else
				if (arr[i])
					fail = false;
			cin.clear();
			cin.ignore(cin.rdbuf()->in_avail());
		} while (fail);
	}
	return *arr;
}
template<typename T>
T vyvod(T* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i];
	}
	cout << endl;
	return *arr;
}
template<typename T>
T _max(T* arr, int size)
{
	int i = 0;
	T max = arr[i];
	for (i = 0; i < size; i++)
	{
		if (arr[i] > max)
			max = arr[i];
		else
			continue;
	}
	cout << max << endl;
	return max;
}
char _max(char* arr, int size)
{
	int i = 0;
	char max = arr[i];
	for (i = 0; i < size; i++)
	{
		if (arr[i] > max)
			max = arr[i];
		else
			continue;
	}
	cout << max << endl;
	return max;
}
int main()
{
	int raz;
	bool fail = true;
	do
	{
		cin >> raz;
		if (std::cin.fail() || std::cin.rdbuf()->in_avail() > 1||raz<1)
			std::cout << "\nError" << std::endl;
		else
			fail = false;
		std::cin.clear();
		std::cin.ignore(std::cin.rdbuf()->in_avail());
	} while (fail);
	int* mas1;
	char* mas2;
	mas1 = new int[raz];
	mas2 = new char[raz];
	vvod(mas1, raz);
	vyvod(mas1, raz);
	_max(mas1, raz);
	vvod(mas2, raz);
	vyvod(mas2, raz);
	_max(mas2, raz);
	delete[] mas1;
	delete[] mas2;
	return 0;
}
